---
name: "Build, push, and deploy image to staging"

on: 
  workflow_call:
    inputs:
      argocd_app_name:
        description: "ArgoCD app name"
        required: true
        type: string
      build_extra_args:
        default: ""
        description: "Extra args for the image build"
        required: false
        type: string
      container_registry:
        description: "Container registry to store the asset built within this workflow"
        required: true
        type: string
      default_branch:
        description: "Default branch"
        required: true
        type: string
      helm_values_file:
        default: "helm/staging.yaml"
        description: "(Optional) Helm values file where the image tag gets updated"
        required: false
        type: string
      helm_values_file_image_tag_path:
        default: "sb-service.image.tag"
        description: "(Optional) Path to the image tag in the helm values file"
        required: false
        type: string
      image_name:
        description: "Image name"
        required: true
        type: string
      image_tag_prefix:
        description: "(Optional) Image tag prefix"
        required: false
        type: string
      slack_channel_id:
        description: "Slack channel ID"
        required: true
        type: string
      slack_channel_name:
        description: "Slack channel name"
        required: true
        type: string

    secrets:
      ARGOCD_TOKEN:
        required: true
        type: string
      ECR_LOGIN_AWS_ACCESS_KEY_ID:
        required: true
        type: string
      ECR_LOGIN_AWS_SECRET_ACCESS_KEY:
        required: true
        type: string
      GH_PRIVATE_REPO_TOKEN:
        required: true
        type: string
      PLATFORMS_BOT_AUTH_TOKEN:
        required: true
        type: string
      PLATFORM_GITHUB_TOKEN:
        required: true
        type: string

env:
  ARGOCD_APP_ENDPOINT: "https://argocd.storyblocks.io/applications/${{ inputs.argocd_app_name }}"
  ARGOCD_APP_NAME: "${{ inputs.argocd_app_name }}"
  APP_ENVIRONMENT: "staging"
  DEFAULT_BRANCH: "${{ inputs.default_branch }}"
  DEPLOYMENT_SLACK_CHANNEL_NAME: "${{ inputs.slack_channel_name }}"
  DEPLOYMENT_SLACK_CHANNEL_ID: "${{ inputs.slack_channel_id }}"
  HELM_REPO_USERNAME: chartblocks
  HELM_VALUES_FILE: "${{ inputs.helm_values_file }}"
  HELM_VALUES_FILE_IMAGE_TAG_PATH: "${{ inputs.helm_values_file_image_tag_path }}"
  IMAGE_NAME: "${{ inputs.image_name }}"
  LATEST_HELM_CHART_VERSION: "v0.0.0"
  YQ_VERSION: "v4.12.2"

jobs:
  build_and_release:
    name: Build image and create release
    runs-on: ubuntu-latest

    # Outputs that need to be exposed for subsequent jobs
    outputs:
      slack_ts: "${{ steps.slack_init.outputs.slack_ts }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Show git commit data
        uses: rlespinasse/git-commit-data-action@v1.x

      - name: Notify Slack a build has started
        id: slack_init
        uses: Footage-Firm/platforms-bot-slack-notify-action@1.1.2
        with:
          action: "init"
          repo_name: "${{ github.repository }}"
          commit_sha: "${{ github.sha }}"
          commit_message: "${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}"
          commit_author: "${{ github.actor }}"
          platforms_bot_token: "${{ secrets.PLATFORMS_BOT_AUTH_TOKEN }}"
          channel: "${{ env.DEPLOYMENT_SLACK_CHANNEL_NAME }}"

      - name: Set tag output
        id: set_tag
        run: |
          echo "::set-output name=tag::$(date +"%m-%d-%Y")-$(git rev-parse --short HEAD)"

      - name: Show tag output
        id: debug
        run: echo "${{ steps.set_tag.outputs.tag }}"

      - name: Build and push
        uses: whoan/docker-build-with-cache-action@v5
        with:
          image_tag: "${{ steps.set_tag.outputs.tag }}"
          username: "${{ secrets.ECR_LOGIN_AWS_ACCESS_KEY_ID }}"
          password: "${{ secrets.ECR_LOGIN_AWS_SECRET_ACCESS_KEY }}"
          registry: "${{ inputs.container_registry }}"
          image_name: "${{ env.IMAGE_NAME }}"
          build_extra_args: "${{ inputs.build_extra_args }}"

      - uses: mukunku/tag-exists-action@v1.0.0
        id: checkTag
        with: 
          tag: "${{ steps.set_tag.outputs.tag }}"
        env:
          GITHUB_TOKEN: "${{ secrets.GH_PRIVATE_REPO_TOKEN }}"

      - name: Bump version and push tag
        if: "${{ ! (steps.checkTag.outputs.exists == 'true') }}"
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.5
        with:
          custom_tag: "${{ steps.set_tag.outputs.tag }}"
          github_token: "${{ secrets.GH_PRIVATE_REPO_TOKEN }}"
          tag_prefix: ""

      - name: Create a GitHub release
        if: "${{ ! (steps.checkTag.outputs.exists == 'true') }}"
        uses: softprops/action-gh-release@v0.1.12
        with:
          name: "Release ${{ steps.tag_version.outputs.new_tag }}"
          tag_name: "${{ steps.tag_version.outputs.new_tag }}"
          body: "${{ steps.tag_version.outputs.changelog }}"
        env:
          GITHUB_TOKEN: "${{ secrets.GH_PRIVATE_REPO_TOKEN }}"

      - name: Notify slack of a failure
        if: "${{ ! success() }}"
        uses: Footage-Firm/platforms-bot-slack-notify-action@1.1.2
        with:
          action: "error"
          slack_ts: "${{ steps.slack_init.outputs.slack_ts }}"
          repo_name: "${{ github.repository }}"
          commit_sha: "${{ github.sha }}"
          commit_message: "${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}"
          commit_author: "${{ github.actor }}"
          platforms_bot_token: "${{ secrets.PLATFORMS_BOT_AUTH_TOKEN }}"
          argocd_app: "${{ env.ARGOCD_APP_NAME }}"
          channel: "${{ env.DEPLOYMENT_SLACK_CHANNEL_ID }}"

  deploy_staging:
    name: Deploy to staging
    needs: build_and_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: "${{ secrets.PLATFORM_GITHUB_TOKEN }}"
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"

      - name: Show tag output
        id: debug_tag
        run: echo "${{ steps.get_tag.outputs.tag }}"

      - name: Show git commit data
        uses: rlespinasse/git-commit-data-action@v1.x

      - name: Print git commit data
        run: |
          echo "Get author info"
          echo " - ${{ env.GIT_COMMIT_AUTHOR }}"
          echo " - ${{ env.GIT_COMMIT_AUTHOR_NAME }}"
          echo " - ${{ env.GIT_COMMIT_AUTHOR_EMAIL }}"
          echo "Get committer info"
          echo " - ${{ env.GIT_COMMIT_COMMITTER }}"
          echo " - ${{ env.GIT_COMMIT_COMMITTER_NAME }}"
          echo " - ${{ env.GIT_COMMIT_COMMITTER_EMAIL }}"
          echo "Get message info"
          echo " - ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}"
          echo " - ${{ env.GIT_COMMIT_MESSAGE_SUBJECT_SANITIZED }}"
          echo " - ${{ env.GIT_COMMIT_MESSAGE_BODY }}"

      - name: Update image tag value
        run: |
          # Get Helm
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh -v v3.6.2
          helm plugin list | grep cm-push || helm plugin install https://github.com/chartmuseum/helm-push.git

          # Update Helm with repo stuff
          cd helm
          helm repo add chartmuseum https://charts.storyblocks.io --username "${{ env.HELM_REPO_USERNAME }}" --password "${{ secrets.HELM_REPO_PASSWORD }}"
          helm repo update
          helm dep update

          # Get yq
          wget -qO ./yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          chmod +x ./yq

          # Update local chart to ensure image tag and commit hash for other envs aren't overridden
          chartname="$( ./yq e '.name' Chart.yaml )"
          helm fetch chartmuseum/"$chartname" --version="${LATEST_HELM_CHART_VERSION}" --destination tmp --untar
          for i in staging prod; do
            live_deploy_tag="$( ./yq e '.sb-service.image.tag' "tmp/$chartname/$i.yaml" )" \
              ./yq e '.sb-service.image.tag = env(live_deploy_tag)' -i "$i.yaml"
          done
          rm -rf ./tmp

          # Deploy to Chartmuseum
          HELM_VALUES_FILE="${APP_ENVIRONMENT}.yaml"
          tag="${{ steps.get_tag.outputs.tag }}" ./yq e '.sb-service.image.tag = env(tag)' -i "${HELM_VALUES_FILE}"
          rm -f ./yq
          helm cm-push --version="v${{ steps.get_tag.outputs.tag }}" . chartmuseum -f
          helm cm-push --version="${LATEST_HELM_CHART_VERSION}" . chartmuseum -f

      - name: Set Helm chart version in ArgoCD
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
        with:
          command: app set "${{ env.ARGOCD_APP_NAME }}"
          options: --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }} --revision "v${{ steps.get_tag.outputs.tag }}"

      - name: Force ArgoCD refresh
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
        with:
          command: app get "${{ env.ARGOCD_APP_NAME }}"
          options: --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }} --hard-refresh

      - name: Trigger Helm deploy
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
        with:
          command: app sync "${{ env.ARGOCD_APP_NAME }}"
          options: --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }}

      - name: Wait for deploy to complete
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: "${{ secrets.PLATFORM_GITHUB_TOKEN }}"
        with:
          command: app wait "${{ env.ARGOCD_APP_NAME }}" --timeout 480
          options: --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }}

      - name: Notify Slack the staging deploy is done
        uses: Footage-Firm/platforms-bot-slack-notify-action@1.1.2
        with:
          action: "deploy_to_staging"
          argocd_app: "${{ env.ARGOCD_APP_NAME }}"
          slack_ts: "${{ needs.build_and_release.outputs.slack_ts }}"
          app_endpoint: "${{ env.ARGOCD_APP_ENDPOINT }}"
          repo_name: "${{ github.repository }}"
          commit_sha: "${{ github.sha }}"
          commit_message: "${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}"
          commit_author: "${{ github.actor }}"
          platforms_bot_token: "${{ secrets.PLATFORMS_BOT_AUTH_TOKEN }}"
          channel: "${{ env.DEPLOYMENT_SLACK_CHANNEL_ID }}"

      - name: Notify slack of a failure
        if: "${{ ! success() }}"
        uses: Footage-Firm/platforms-bot-slack-notify-action@1.1.2
        with:
          action: "error"
          slack_ts: "${{ needs.build_and_release.outputs.slack_ts }}"
          repo_name: "${{ github.repository }}"
          commit_sha: "${{ github.sha }}"
          commit_message: "${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}"
          commit_author: "${{ github.actor }}"
          platforms_bot_token: "${{ secrets.PLATFORMS_BOT_AUTH_TOKEN }}"
          argocd_app: "${{ env.ARGOCD_APP_NAME }}"
          channel: "${{ env.DEPLOYMENT_SLACK_CHANNEL_ID }}"
