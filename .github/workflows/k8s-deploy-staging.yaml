---
name: Deploy image to staging

on: 
  workflow_call:
    inputs:
      argocd_app_name:
        description: ArgoCD app name
        required: true
        type: string
      default_branch:
        description: Default branch
        required: true
        type: string
      helm_chartmuseum_push:
        default: true
        description: (Optional) Whether or not to push to chartmuseum, defaults to true
        required: false
        type: boolean
      helm_environment_values_file:
        default: staging.yaml
        description: (Optional) Helm values file, for a specific environment, where the image tag gets updated
        required: false
        type: string
      helm_values_file:
        default: values.yaml
        description: (Optional) Primary Helm values file where the image tag gets updated
        required: false
        type: string
      helm_values_file_image_tag_path:
        default: sb-service.image.tag
        description: (Optional) Path to the image tag in the helm values file
        required: false
        type: string
      helm_values_file_service_version_path:
        default: "version"
        description: "(Optional) Path to the version in the helm values file"
        required: false
        type: string
      image_name:
        description: Image name
        required: true
        type: string
      image_tag:
        default: get_tag
        description: Image tag
        required: false
        type: string
      legacy_slack_notifications:
        default: 'yes'
        description: Whether or not to notify slack
        required: false
        type: string
      slack_channel_id:
        description: Slack channel ID
        required: false
        type: string
      slack_channel_name:
        description: Slack channel name
        required: false
        type: string
      slack_ts:
        description: Slack message timestamp
        required: false
        type: string

    secrets:
      ARGOCD_TOKEN:
        required: true
      HELM_REPO_PASSWORD:
        required: true
      GH_PRIVATE_REPO_TOKEN:
        required: true
      PLATFORMS_BOT_AUTH_TOKEN:
        required: true
      PLATFORM_GITHUB_TOKEN:
        required: true

env:
  ARGOCD_APP_ENDPOINT: https://argocd.storyblocks.io/applications/${{ inputs.argocd_app_name }}
  ARGOCD_APP_NAME: ${{ inputs.argocd_app_name }}
  APP_ENVIRONMENT: staging
  DEFAULT_BRANCH: ${{ inputs.default_branch }}
  DEPLOYMENT_SLACK_CHANNEL_NAME: ${{ inputs.slack_channel_name }}
  DEPLOYMENT_SLACK_CHANNEL_ID: ${{ inputs.slack_channel_id }}
  HELM_REPO_USERNAME: chartblocks
  HELM_VALUES_FILE: ${{ inputs.helm_values_file }}
  HELM_ENV_VALUES_FILE: ${{ inputs.helm_environment_values_file }}
  HELM_VALUES_FILE_IMAGE_TAG_PATH: ${{ inputs.helm_values_file_image_tag_path }}
  HELM_VALUES_FILE_SERVICE_VERSION_PATH: "${{ inputs.helm_values_file_service_version_path }}"
  IMAGE_NAME: ${{ inputs.image_name }}
  LATEST_HELM_CHART_VERSION: v0.0.0
  YQ_VERSION: v4.12.2

jobs:
  deploy_staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get latest tag
        if: ${{ inputs.image_tag == 'get_tag' }}
        id: get_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1

      - name: Show tag output
        if: ${{ inputs.image_tag == 'get_tag' }}
        id: debug_tag
        run: echo ${{ steps.get_tag.outputs.tag }}

      - name: Show git commit data
        uses: rlespinasse/git-commit-data-action@v1.x

      - name: Print git commit data
        run: |
          echo "Get author info"
          echo " - ${{ env.GIT_COMMIT_AUTHOR }}"
          echo " - ${{ env.GIT_COMMIT_AUTHOR_NAME }}"
          echo " - ${{ env.GIT_COMMIT_AUTHOR_EMAIL }}"
          echo "Get committer info"
          echo " - ${{ env.GIT_COMMIT_COMMITTER }}"
          echo " - ${{ env.GIT_COMMIT_COMMITTER_NAME }}"
          echo " - ${{ env.GIT_COMMIT_COMMITTER_EMAIL }}"
          echo "Get message info"
          echo " - ${{ env.GIT_COMMIT_MESSAGE_SUBJECT_SANITIZED }}"

      - name: Push new Helm chart
        if: ${{ inputs.helm_chartmuseum_push }}
        run: |
          # Get Helm
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh -v v3.6.2
          helm plugin list | grep cm-push || helm plugin install https://github.com/chartmuseum/helm-push.git

          # Update Helm with repo stuff
          cd helm
          helm repo add chartmuseum https://charts.storyblocks.io --username "${{ env.HELM_REPO_USERNAME }}" --password "${{ secrets.HELM_REPO_PASSWORD }}"
          helm repo update
          helm dep update

          # Get yq
          wget -qO ./yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          chmod +x ./yq

          # Update local chart to ensure image tag and commit hash for other envs aren't overridden
          chartname="$( ./yq e '.name' Chart.yaml )"
          if helm fetch chartmuseum/"$chartname" --version="${LATEST_HELM_CHART_VERSION}" --destination tmp --untar
          then
            for i in staging prod; do
              live_deploy_tag="$( ./yq e ".$HELM_VALUES_FILE_IMAGE_TAG_PATH" "tmp/$chartname/$i.yaml" )" \
                ./yq e '.'$HELM_VALUES_FILE_IMAGE_TAG_PATH' = env(live_deploy_tag)' -i "$i.yaml"
            done
            rm -rf ./tmp
          else
            helm cm-push --version="${LATEST_HELM_CHART_VERSION}" . chartmuseum
          fi

          # Deploy to Chartmuseum
          if [[ ${{ inputs.image_tag }} == "get_tag" ]]; then
            tag="${{ steps.get_tag.outputs.tag }}" ./yq e '.'$HELM_VALUES_FILE_IMAGE_TAG_PATH' = env(tag)' -i "${HELM_VALUES_FILE}"
            tag="${{ steps.get_tag.outputs.tag }}" ./yq e '.'$HELM_VALUES_FILE_IMAGE_TAG_PATH' = env(tag)' -i "${HELM_ENV_VALUES_FILE}"
          else
            tag="${{ inputs.image_tag }}" ./yq e '.'$HELM_VALUES_FILE_IMAGE_TAG_PATH' = env(tag)' -i "${HELM_VALUES_FILE}"
            tag="${{ inputs.image_tag }}" ./yq e '.'$HELM_VALUES_FILE_IMAGE_TAG_PATH' = env(tag)' -i "${HELM_ENV_VALUES_FILE}"
          fi

          rm -f ./yq
          helm cm-push --version="${LATEST_HELM_CHART_VERSION}" . chartmuseum -f

      - name: Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v5.1

      - name: Update branch being tracked in ArgoCD
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
        with:
          command: app patch "${{ env.ARGOCD_APP_NAME }}"
          options: |
            --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }} --patch '{"spec": { "source": { "targetRevision": "${{ steps.branch_name.outputs.current_branch }}" }}}' --type merge

      - name: Set service SHA in ArgoCD
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
        with:
          command: app set "${{ env.ARGOCD_APP_NAME }}"
          options: --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }} --helm-set "${{ env.HELM_VALUES_FILE_SERVICE_VERSION_PATH }}=${{ env.GITHUB_SHA }}"

      - name: Set image version in ArgoCD
        if: ${{ inputs.image_tag == 'get_tag' }}
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
        with:
          command: app set "${{ env.ARGOCD_APP_NAME }}"
          options: --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }} --helm-set "${{ env.HELM_VALUES_FILE_IMAGE_TAG_PATH }}=${{ steps.get_tag.outputs.tag }}"

      - name: Set image version in ArgoCD
        if: ${{ ! (inputs.image_tag == 'get_tag') }}
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
        with:
          command: app set "${{ env.ARGOCD_APP_NAME }}"
          options: --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }} --helm-set "${{ env.HELM_VALUES_FILE_IMAGE_TAG_PATH }}=${{ inputs.image_tag }}"

      - name: Force ArgoCD refresh
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
        with:
          command: app get "${{ env.ARGOCD_APP_NAME }}"
          options: --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }} --hard-refresh

      - name: Trigger Helm deploy
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: ${{ secrets.PLATFORM_GITHUB_TOKEN }}
        with:
          command: app sync "${{ env.ARGOCD_APP_NAME }}"
          options: --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }}

      - name: Wait for deploy to complete
        uses: clowdhaus/argo-cd-action/@main
        env:
          GITHUB_TOKEN: "${{ secrets.PLATFORM_GITHUB_TOKEN }}"
        with:
          command: app wait "${{ env.ARGOCD_APP_NAME }}" --timeout 480
          options: --server argocd.storyblocks.io --auth-token ${{ secrets.ARGOCD_TOKEN }}

      - name: Notify Slack the staging deploy is done
        if: "${{ inputs.legacy_slack_notifications == 'yes' }}"
        uses: Footage-Firm/platforms-bot-slack-notify-action@1.1.2
        with:
          action: "deploy_to_staging"
          argocd_app: "${{ env.ARGOCD_APP_NAME }}"
          slack_ts: "${{ inputs.slack_ts }}"
          app_endpoint: "${{ env.ARGOCD_APP_ENDPOINT }}"
          repo_name: "${{ github.repository }}"
          commit_sha: "${{ github.sha }}"
          commit_message: "${{ env.GIT_COMMIT_MESSAGE_SUBJECT_SANITIZED }}"
          commit_author: "${{ github.actor }}"
          platforms_bot_token: "${{ secrets.PLATFORMS_BOT_AUTH_TOKEN }}"
          channel: "${{ env.DEPLOYMENT_SLACK_CHANNEL_ID }}"

      - name: Notify slack of a failure
        if: "${{ !(success()) && (inputs.legacy_slack_notifications == 'yes') }}"
        uses: Footage-Firm/platforms-bot-slack-notify-action@1.1.2
        with:
          action: "error"
          slack_ts: "${{ inputs.slack_ts }}"
          repo_name: "${{ github.repository }}"
          commit_sha: "${{ github.sha }}"
          commit_message: "${{ env.GIT_COMMIT_MESSAGE_SUBJECT_SANITIZED }}"
          commit_author: "${{ github.actor }}"
          platforms_bot_token: "${{ secrets.PLATFORMS_BOT_AUTH_TOKEN }}"
          argocd_app: "${{ env.ARGOCD_APP_NAME }}"
          channel: "${{ env.DEPLOYMENT_SLACK_CHANNEL_ID }}"
