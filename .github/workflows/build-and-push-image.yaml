---
name: Build and push image

on:
  workflow_call:
    inputs:
      argocd_app_name:
        description: ArgoCD app name
        required: false
        type: string
      build_target:
        default: ""
        description: Docker build target. Provide WITH the target flag (i.e. --target=prod)
        required: false
        type: string
      comma_separated_architectures:
        default: linux/amd64,linux/arm64
        description: Comma-separated list of architectures to push a multi-architecture image manifest for
        required: false
        type: string
      dockerfile:
        default: Dockerfile
        description: The dockerfile used to build the image.
        required: false
        type: string
      image_name:
        description: Image name
        required: true
        type: string
      image_tag:
        default: set_tag
        description: Image tag
        required: false
        type: string
      image_tag_prefix:
        description: (Optional) Image tag prefix
        required: false
        type: string
      legacy_slack_notifications:
        default: 'yes'
        description: Whether or not to notify slack
        required: false
        type: string
      multi_architecture_image_tag:
        default: multi-platform-latest
        description: Tag to be used when pushing up the multi-arch image
        required: false
        type: string
      slack_channel_id:
        default: C02A56KCMPG
        description: Slack channel ID
        required: false
        type: string
      slack_channel_name:
        default: eng-platforms-deploy
        description: Slack channel name
        required: false
        type: string
      slack_ts:
        description: Slack timestamp
        required: false
        type: string

    secrets:
      BUILD_ARGS:
        required: true
      DEPOT_TOKEN:
        required: true
      GH_PRIVATE_REPO_TOKEN:
        required: true
      PLATFORMS_BOT_AUTH_TOKEN:
        required: true
      ECR_REGISTRY_USERNAME:
        required: true
      ECR_REGISTRY_PASSWORD:
        required: true
      DOCKERHUB_REGISTRY_USERNAME:
        required: true
      DOCKERHUB_REGISTRY_PASSWORD:
        required: true

env:
  ARGOCD_APP_NAME: ${{ inputs.argocd_app_name }}
  BUILD_TARGET: ${{ inputs.build_target }}
  COMMA_SEPARATED_ARCHITECTURES: ${{ inputs.comma_separated_architectures }}
  DEPLOYMENT_SLACK_CHANNEL_NAME: ${{ inputs.slack_channel_name }}
  DEPLOYMENT_SLACK_CHANNEL_ID: ${{ inputs.slack_channel_id }}
  DOCKERFILE: ${{ inputs.dockerfile }}
  DOCKERHUB_REGISTRY: videoblocks
  ECR_REGISTRY: 031780582162.dkr.ecr.us-east-1.amazonaws.com
  IMAGE_NAME: ${{ inputs.image_name }}
  MANIFEST_TOOL_VERSION: 2.0.0
  MULTI_ARCHITECTURE_IMAGE_TAG: ${{ inputs.multi_architecture_image_tag }}
  SLACK_TS: ${{ inputs.slack_ts }}

jobs:
  set_tag:
    name: Set tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set tag output
        id: set_tag
        run: |
            echo "::set-output name=tag::$(date +'%m-%d-%Y')-$(git rev-parse --short HEAD)"

      - name: Show tag output
        id: debug
        run: echo "${{ steps.set_tag.outputs.tag }}"

      - name: Notify slack of a failure
        if: ${{ !(success()) && (inputs.legacy_slack_notifications == 'yes') }}
        uses: Footage-Firm/platforms-bot-slack-notify-action@1.1.2
        with:
          action: error
          slack_ts: ${{ env.SLACK_TS }}
          repo_name: ${{ github.repository }}
          commit_sha: ${{ github.sha }}
          commit_message: ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}
          commit_author: ${{ github.actor }}
          platforms_bot_token: ${{ secrets.PLATFORMS_BOT_AUTH_TOKEN }}
          argocd_app: ${{ env.ARGOCD_APP_NAME }}
          channel: ${{ env.DEPLOYMENT_SLACK_CHANNEL_ID }}

  build_and_push:
    runs-on: ubuntu-latest
    name: Multi-arch build and push
    needs: set_tag
    outputs:
      slack_ts: ${{ steps.set_slack_ts.outputs.slack_ts }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Show tag output
        id: debug
        run: echo "${{ needs.set_tag.outputs.tag }}"

      - name: Show git commit data
        uses: rlespinasse/git-commit-data-action@v1.x

      - uses: depot/setup-action@v1

      - name: Login to Dockerhub
        if: ${{ inputs.image_tag == 'set_tag' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKERHUB_REGISTRY_PASSWORD }}

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.ECR_REGISTRY_USERNAME }}
          password: ${{ secrets.ECR_REGISTRY_PASSWORD }}

      - name: Split build args into list
        uses: jungwinter/split@v2
        id: split
        with:
          msg: ${{ secrets.BUILD_ARGS }}
          separator: ","

      - name: Build and push
        if: ${{ inputs.image_tag == 'set_tag' }}
        uses: depot/build-push-action@v1
        with:
          push: true
          file: ${{ env.DOCKERFILE }}
          build-args: ${{ steps.split.outputs.* }}
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.set_tag.outputs.tag }}
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.set_tag.outputs.tag }}
          target: ${{ env.BUILD_TARGET }}
        env:
          DEPOT_PROJECT_ID: "njzsdnp9fd"
          DEPOT_TOKEN: ${{ secrets.DEPOT_TOKEN }}

      - uses: mukunku/tag-exists-action@v1.0.0
        if: ${{ inputs.image_tag == 'set_tag' }}
        id: check_tag
        with: 
          tag: ${{ needs.set_tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PRIVATE_REPO_TOKEN }}

      - name: Bump version and push tag
        if: ${{ !(steps.check_tag.outputs.exists == 'true') && inputs.image_tag == 'set_tag' }}
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.5
        with:
          custom_tag: ${{ needs.set_tag.outputs.tag }}
          github_token: ${{ secrets.GH_PRIVATE_REPO_TOKEN }}
          tag_prefix: ''

      # The following two steps are only used when a specific tag is passed as an input to this reusable workflow

      - name: Build and push specifically tagged image
        if: ${{ ! (inputs.image_tag == 'set_tag') }}
        uses: whoan/docker-build-with-cache-action@v5
        with:
          image_tag: ${{ matrix.architecture }}-${{ inputs.image_tag }}
          username: ${{ secrets.ECR_REGISTRY_USERNAME }}
          password: ${{ secrets.ECR_REGISTRY_PASSWORD }}
          registry: ${{ env.ECR_REGISTRY }}
          image_name: ${{ env.IMAGE_NAME }}
          build_extra_args: "${{ env.BUILD_TARGET }} ${{ secrets.BUILD_ARGS }}"

      - name: Push specifically tagged multi-architecture image manifest to ECR
        if: ${{ ! (inputs.image_tag == 'set_tag') }}
        run: |
          (./manifest-tool \
            push from-args \
            --platforms ${{ env.COMMA_SEPARATED_ARCHITECTURES }} \
            --template ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:ARCH-${{ inputs.image_tag }} \
            --target ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }} \
          && ./manifest-tool \
            inspect ${{ env.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}) \
          || echo "Can't push multi-arch image. This most likely means the builds for the other architectures are not yet complete."

      - name: Notify slack of a cancellation
        if: ${{ cancelled() && (matrix.architecture == 'amd64') && (inputs.image_tag == 'set_tag') && (inputs.legacy_slack_notifications == 'yes') }}
        uses: Footage-Firm/platforms-bot-slack-notify-action@1.1.2
        with:
          action: error
          slack_ts: ${{ env.SLACK_TS }}
          repo_name: ${{ github.repository }}
          commit_sha: ${{ github.sha }}
          commit_message: ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}
          commit_author: ${{ github.actor }}
          platforms_bot_token: ${{ secrets.PLATFORMS_BOT_AUTH_TOKEN }}
          argocd_app: ${{ env.ARGOCD_APP_NAME }}
          channel: ${{ env.DEPLOYMENT_SLACK_CHANNEL_ID }}

      - name: Notify slack of a failure
        if: ${{ (failure()) && (inputs.legacy_slack_notifications == 'yes') }}
        uses: Footage-Firm/platforms-bot-slack-notify-action@1.1.2
        with:
          action: error
          slack_ts: ${{ env.SLACK_TS }}
          repo_name: ${{ github.repository }}
          commit_sha: ${{ github.sha }}
          commit_message: ${{ env.GIT_COMMIT_MESSAGE_SUBJECT }}
          commit_author: ${{ github.actor }}
          platforms_bot_token: ${{ secrets.PLATFORMS_BOT_AUTH_TOKEN }}
          argocd_app: ${{ env.ARGOCD_APP_NAME }}
          channel: ${{ env.DEPLOYMENT_SLACK_CHANNEL_ID }}
